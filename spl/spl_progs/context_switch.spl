// Fetching PID of current process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

multipush(BP);

// Updating process table entry for current process
alias PROCESS_TABLE_ENTRY R1;
PROCESS_TABLE_ENTRY = PROCESS_TABLE + currentPID * 16;
[PROCESS_TABLE_ENTRY + 12] = SP % 512;
[PROCESS_TABLE_ENTRY + 14] = PTBR;
[PROCESS_TABLE_ENTRY + 15] = PTLR;

// Set new process as next process in READY/CREATED state (if none, idle process)
alias ctr R2;
alias newPID R3;
ctr = currentPID + 1;
while(ctr < 16) do
    if([PROCESS_TABLE+ctr*16 + 4] == READY || [PROCESS_TABLE+ctr*16 + 4] == CREATED) then
        newPID = ctr;
        break;
    endif;
    ctr = ctr + 1;
endwhile;
if(ctr == 16) then
    newPID = 0;
endif;

// Restoring values from process table entry for new process
alias NEW_PROCESS_TABLE_ENTRY R4;
NEW_PROCESS_TABLE_ENTRY = PROCESS_TABLE + newPID * 16;
SP =  [NEW_PROCESS_TABLE_ENTRY + 11] * 512 + [NEW_PROCESS_TABLE_ENTRY + 12] ;
PTBR = [NEW_PROCESS_TABLE_ENTRY + 14];
PTLR = [NEW_PROCESS_TABLE_ENTRY + 15];

// Update PID in System Status Table
[SYSTEM_STATUS_TABLE + 1] = newPID;

// if state is CREATED, no user context to be restored
if([NEW_PROCESS_TABLE_ENTRY + 4] == CREATED) then
    [NEW_PROCESS_TABLE_ENTRY + 4] = RUNNING;
    [NEW_PROCESS_TABLE_ENTRY + 9] = 0;
    SP = [NEW_PROCESS_TABLE_ENTRY + 13];
    ireturn;
endif;

[NEW_PROCESS_TABLE_ENTRY + 4] = RUNNING;

multipop(BP);

return;
