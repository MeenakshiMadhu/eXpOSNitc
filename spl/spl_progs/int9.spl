// INTERRUPT 9
// Exec system call

// print("EXEC");
breakpoint;
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +13] = userSP;

//set MODE flag field in process table to 9 for exec system call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

//Switching to Kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]*512 - 1;

// Accessing arg 1 - File Name
alias fileNamePhysicalAddr R1;
fileNamePhysicalAddr = ([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + ((userSP - 4) % 512);
alias fileName R2;
fileName=[fileNamePhysicalAddr];

// Searching memory copy of inodetable
alias ctr R3;
alias inodeIndex R4;
ctr = 0; 
while (ctr < MAX_FILE_NUM) do
    if (([INODE_TABLE + ctr*16 + 1] == fileName) && ([INODE_TABLE + ctr*16] == EXEC)) then
        inodeIndex = ctr;
        break;
    endif;
    ctr = ctr+1;
endwhile;
if (ctr == MAX_FILE_NUM) then
    // Storing -1 as a return value
    alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// call exit process function in PROCESS_MANAGER with current PID;
multipush (R0, R1, R2, R3, R4, R5);
alias functionNum R1;
alias PID R2;
functionNum = 3;
PID = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;
multipop (R0, R1, R2, R3, R4, R5);

breakpoint;
// get user area page no. of current process
alias userPageNumber R6;
userPageNumber = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11];

// reclaiming user area page
// incrementing memory free list entry & decrementing mem free count
[MEMORY_FREE_LIST + userPageNumber] = [MEMORY_FREE_LIST + userPageNumber] +1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;


// initialize kernel stack of new process
SP = userPageNumber*512 - 1;

// update PER PROCESS RESOURCE TABLE
alias perProcessResTable R5;
perProcessResTable = SP + 497;
ctr = 0;
while (ctr < 16) do
    [perProcessResTable + ctr] = -1;
    ctr = ctr + 2;
endwhile;

// update process table entry
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = inodeIndex;

breakpoint;
// Set library page entries in page table
PTBR = PAGE_TABLE_BASE+ 20*[SYSTEM_STATUS_TABLE + 1];
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//invalidate pg table entries for heap 
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";


// invoke Get Free Page to allocate 2 stack pages
// validate entries in page table
multipush (R0, R1, R2, R3, R4, R5);
multipush (R1, R2, R3, R4, R5);
functionNum = 1;
PID = [SYSTEM_STATUS_TABLE + 1];
call MEMORY_MANAGER;
multipop (R1, R2, R3, R4, R5);
[PTBR+16] = R0;
[PTBR+17] = "0110";
multipush (R1, R2, R3, R4, R5);
functionNum = 1;
PID = [SYSTEM_STATUS_TABLE + 1];
call MEMORY_MANAGER;
multipop (R1, R2, R3, R4, R5);
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop (R0, R1, R2, R3, R4, R5);


// invoke Get Code page to allocate first code page 
// update page table entries
multipush (R0, R1, R2, R3, R4, R5);
functionNum = 5;
PID = [SYSTEM_STATUS_TABLE + 1];
alias blockNumber R3;
blockNumber = [INODE_TABLE + 16*inodeIndex + 8];
call MEMORY_MANAGER;
[PTBR+8] = R0;
[PTBR+9] = "0100";
multipop (R0, R1, R2, R3, R4, R5);

//invalidate other code pages
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//initialize PER PROCESS DISK MAP TABLE
alias diskMapTableEntry R7;
diskMapTableEntry = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10;
alias blockNum R8;
blockNum = 8;
alias disk R9;
disk = 4;

while(disk < 8 && [INODE_TABLE + inodeIndex*16 + blockNum] != -1) do
    //print [INODE_TABLE + inodeIndex*16 + blockNum];
    [diskMapTableEntry + disk] = [INODE_TABLE + inodeIndex*16 + blockNum];
    disk = disk+1;
    blockNum = blockNum + 1;
endwhile;


// store entry point IP in stack
[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +13] = 8*512;
SP = 8*512;
// print("Exit EXEC");
breakpoint;
ireturn;

