//MODULE 4

alias functionNum R1;
alias currentPID R2;

// Disk Load
if (functionNum == 2) then
    
    alias pageNumber R3;
    alias blockNumber R4;

    // calling Acquire Disk
    multipush(R0, R1, R2, R3, R4, R5, R6);
    functionNum = 3;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5, R6);

    // updating Disk Status Table 
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = pageNumber;
    [DISK_STATUS_TABLE + 3] = blockNumber;

    load (pageNumber, blockNumber);
    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;

    multipush(R0, R1, R2, R3, R4, R5, R6);
    call CONTEXT_SWITCH;
    multipop(R0, R1, R2, R3, R4, R5, R6);
    return;

endif;

// Terminal Write
if( functionNum == 3 ) then
    
    // calling Acquire Terminal
    multipush(R0, R1, R2, R3, R4, R5, R6);
    functionNum = 8;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5, R6);

    alias word R3;
    print word;

    // calling Release Terminal 
    multipush(R0, R1, R2, R3, R4, R5, R6);
    functionNum = 9;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    //can store return value from R0 to another reg
    multipop(R0, R1, R2, R3, R4, R5, R6);
    return;
endif ;

// Terminal Read
if( functionNum == 4 ) then
    
    // calling acquire Terminal
    multipush(R0, R1, R2, R3, R4, R5, R6);
    functionNum = 8;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5, R6);
    
    read;
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
    
    multipush(R0, R1, R2, R3, R4, R5, R6);
    call CONTEXT_SWITCH;
    multipop(R0, R1, R2, R3, R4, R5, R6);
    
    alias addr R3;
    alias word R7;
    word = [PTBR + 2*(addr/512)]*512 + (addr % 512);
    [word] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 8];
    return;
endif;

return;