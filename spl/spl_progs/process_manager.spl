// MODULE 1 - PROCESS MANAGER

alias functionNum R1;
alias PID R2;

// Free User Area Page
if (functionNum == 2) then

    alias processTableEntry R3;
    processTableEntry = PROCESS_TABLE + PID*16;
    
    // invoke Release Page function with corresponding page number
    multipush(R0, R1, R2, R3);
    alias functionNum R1;
    alias userAreaPageNum R2;
    functionNum = 2;
    userAreaPageNum = [processTableEntry + 11];
    call MEMORY_MANAGER;
    multipop(R0, R1, R2, R3);

    return;
endif;

// Exit Process
if (functionNum == 3) then

    // invoke Free Page Table function from Process Manager
    multipush(R0, R1, R2, R3);
    functionNum = 4;
    call PROCESS_MANAGER;
    multipop(R0, R1, R2, R3);

    // invoke Free User Area Page function from Process Manager
    multipush(R0, R1, R2, R3);
    functionNum = 2;
    call PROCESS_MANAGER;
    multipop(R0, R1, R2, R3);

    [PROCESS_TABLE + PID*16 + 4] = TERMINATED;
    // print("Exited process");
    breakpoint;
    return;
endif;

// Free Page Table 
if (functionNum == 4) then
    
    // Invalidate page table entries
    PTBR = PAGE_TABLE_BASE+ PID*20;
    PTLR = 10;
    //Library
    [PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";
    
    // for each valid entry in page table, invoke Release Page
    multipush(R0, R1, R2, R3, R4, R5);
    alias ctr R4;
    alias pageNum R3;
    ctr = 4;
    while (ctr < 20) do
        if ([PTBR + ctr] != -1) then
            functionNum = 2;
            pageNum = [PTBR + ctr];
            call MEMORY_MANAGER;
        endif;
        [PTBR + ctr] = -1;
        [PTBR + ctr + 1] = "0000";
        ctr = ctr + 2;
    endwhile;
    multipop(R0, R1, R2, R3, R4, R5);

    // for each valid code/heap entry in DMT, invoke Release block 
    alias diskMapTableEntry R5;
    diskMapTableEntry = DISK_MAP_TABLE + PID*10;
    ctr = 2;
    while (ctr < 10) do 
        if ([diskMapTableEntry + ctr] != -1 && (ctr == 2 || ctr == 3 || ctr == 8 || ctr == 9)) then
            multipush(R0, R1, R2, R3, R4);
            functionNum = 4;
            alias blockNum R3;
            blockNum = [diskMapTableEntry + ctr];
            call MEMORY_MANAGER;
            multipop(R0, R1, R2, R3, R4);
        endif;
        [diskMapTableEntry + ctr] = -1;
        ctr = ctr + 1;
    endwhile;


    return;
endif;